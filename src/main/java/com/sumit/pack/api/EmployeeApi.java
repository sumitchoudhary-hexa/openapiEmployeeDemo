/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.sumit.pack.api;

import com.sumit.pack.models.Employee;
import java.util.List;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Api(value = "employee", description = "the employee API")
public interface EmployeeApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /employee
     *
     * @return returning all the employees data (status code 200)
     */
    @ApiOperation(value = "", nickname = "employeeGet", notes = "", response = Employee.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "returning all the employees data", response = Employee.class, responseContainer = "List") })
    @GetMapping(
        value = "/employee",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Employee>> employeeGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"id\" : 0, \"salary\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /employee/{id}
     *
     * @param id Employee id to delete employee in (required)
     * @return returning deleted employee (status code 200)
     */
    @ApiOperation(value = "", nickname = "employeeIdDelete", notes = "", response = Employee.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "returning deleted employee", response = Employee.class, responseContainer = "List") })
    @DeleteMapping(
        value = "/employee/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Employee>> employeeIdDelete(@ApiParam(value = "Employee id to delete employee in",required=true) @PathVariable("id") Employee id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"id\" : 0, \"salary\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /employee/{id}
     * returning all emplyoees with names
     *
     * @param id  (required)
     * @return success response (status code 200)
     */
    @ApiOperation(value = "", nickname = "employeeIdGet", notes = "returning all emplyoees with names", response = Employee.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success response", response = Employee.class, responseContainer = "List") })
    @GetMapping(
        value = "/employee/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Employee>> employeeIdGet(@ApiParam(value = "",required=true) @PathVariable("id") Integer id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"id\" : 0, \"salary\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /employee/{name}
     * returning all emplyoees with names
     *
     * @param name  (required)
     * @return success response (status code 200)
     */
    @ApiOperation(value = "", nickname = "employeeNameGet", notes = "returning all emplyoees with names", response = Employee.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success response", response = Employee.class, responseContainer = "List") })
    @GetMapping(
        value = "/employee/{name}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Employee>> employeeNameGet(@ApiParam(value = "",required=true) @PathVariable("name") String name) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"id\" : 0, \"salary\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /employee
     *
     * @param employee  (optional)
     * @return returning inserted employee (status code 200)
     */
    @ApiOperation(value = "", nickname = "employeePost", notes = "", response = Employee.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "returning inserted employee", response = Employee.class, responseContainer = "List") })
    @PostMapping(
        value = "/employee",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<List<Employee>> employeePost(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) List<Employee> employee) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"id\" : 0, \"salary\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /employee
     * put operation
     *
     * @param employee  (optional)
     * @return returning inserted employee (status code 200)
     */
    @ApiOperation(value = "", nickname = "employeePut", notes = "put operation", response = Employee.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "returning inserted employee", response = Employee.class, responseContainer = "List") })
    @PutMapping(
        value = "/employee",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<List<Employee>> employeePut(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) List<Employee> employee) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"id\" : 0, \"salary\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
